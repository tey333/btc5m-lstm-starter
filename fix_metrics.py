#!/usr/bin/env python3
"""
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå metrics CSV ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ KeyError ‡πÉ‡∏ô Colab notebook
"""

import pandas as pd
import numpy as np
import glob
from pathlib import Path
import json

def create_complete_metrics():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå metrics ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
    
    trades_dir = Path('outputs/trades')
    if not trades_dir.exists():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå trades!")
        return None
    
    trade_files = list(trades_dir.glob("trades_w*.parquet"))
    if not trade_files:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå trades!")
        return None
    
    print("üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå metrics ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå...")
    
    metrics_list = []
    
    for file in trade_files:
        try:
            # ‡πÅ‡∏¢‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç window
            window_num = int(file.stem.split('_w')[1])
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
            df = pd.read_parquet(file)
            
            if len(df) == 0:
                print(f"‚ö†Ô∏è Window {window_num}: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
                continue
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì metrics ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            total_trades = len(df)
            winning_trades = (df['ret'] > 0).sum()
            losing_trades = (df['ret'] < 0).sum()
            
            win_rate = winning_trades / total_trades if total_trades > 0 else 0.0
            total_return = df['ret'].sum()
            avg_return_per_trade = df['ret'].mean()
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Profit Factor
            gross_profit = df[df['ret'] > 0]['ret'].sum() if winning_trades > 0 else 0.0
            gross_loss = abs(df[df['ret'] < 0]['ret'].sum()) if losing_trades > 0 else 0.0001
            profit_factor = gross_profit / gross_loss if gross_loss > 0 else 10.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Drawdown
            equity_curve = (1 + df['ret']).cumprod()
            running_max = equity_curve.expanding().max()
            drawdown = (equity_curve - running_max) / running_max
            max_drawdown = drawdown.min()
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Sharpe Ratio
            returns_std = df['ret'].std()
            sharpe_ratio = avg_return_per_trade / returns_std if returns_std > 0 else 0.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Average Win/Loss
            avg_win = df[df['ret'] > 0]['ret'].mean() if winning_trades > 0 else 0.0
            avg_loss = df[df['ret'] < 0]['ret'].mean() if losing_trades > 0 else 0.0
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á metrics dictionary
            metrics = {
                'window': window_num,
                'total_trades': total_trades,
                'winning_trades': winning_trades,
                'losing_trades': losing_trades,
                'win_rate': win_rate,
                'total_return_equity': total_return,
                'avg_return_per_trade': avg_return_per_trade,
                'profit_factor': profit_factor,
                'max_drawdown': max_drawdown,
                'sharpe_ratio': sharpe_ratio,
                'gross_profit': gross_profit,
                'gross_loss': gross_loss,
                'avg_win': avg_win,
                'avg_loss': avg_loss,
                'best_trade': df['ret'].max(),
                'worst_trade': df['ret'].min()
            }
            
            metrics_list.append(metrics)
            print(f"‚úÖ Window {window_num}: {total_trades} trades, Return={total_return:.2%}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå {file}: {e}")
    
    if not metrics_list:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á metrics ‡πÑ‡∏î‡πâ!")
        return None
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
    metrics_df = pd.DataFrame(metrics_list)
    metrics_df = metrics_df.sort_values('window')
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô CSV
    metrics_dir = Path('outputs/metrics')
    metrics_dir.mkdir(exist_ok=True)
    
    csv_filename = f'trading_metrics_complete_{len(metrics_df)}_windows.csv'
    csv_path = metrics_dir / csv_filename
    
    metrics_df.to_csv(csv_path, index=False)
    
    print(f"\n‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå {csv_filename} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
    print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Windows: {len(metrics_df)}")
    print(f"üìä Columns: {list(metrics_df.columns)}")
    
    # ‡∏´‡∏≤ best/worst windows (‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
    total_returns = metrics_df['total_return_equity'].tolist()
    windows = metrics_df['window'].tolist()
    
    max_return_idx = total_returns.index(max(total_returns))
    min_return_idx = total_returns.index(min(total_returns))
    
    best_window_val = windows[max_return_idx]
    worst_window_val = windows[min_return_idx]
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ JSON
    summary = {
        "summary": {
            "total_windows": len(metrics_df),
            "avg_win_rate": float(metrics_df['win_rate'].mean()),
            "avg_profit_factor": float(metrics_df['profit_factor'].mean()),
            "avg_return": float(metrics_df['total_return_equity'].mean()),
            "total_return": float(metrics_df['total_return_equity'].sum()),
            "max_drawdown": float(metrics_df['max_drawdown'].min()),
            "total_trades": int(metrics_df['total_trades'].sum()),
            "profitable_windows": int((metrics_df['total_return_equity'] > 0).sum()),
            "best_window": best_window_val,
            "worst_window": worst_window_val
        },
        "detailed_metrics": metrics_df.to_dict('records')
    }
    
    json_path = metrics_dir / 'complete_metrics_summary.json'
    with open(json_path, 'w') as f:
        json.dump(summary, f, indent=2)
    
    print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå JSON summary ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
    
    return metrics_df

def display_summary(df):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
    
    print("\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
    print("=" * 80)
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
    total_return = df['total_return_equity'].sum()
    avg_win_rate = df['win_rate'].mean()
    avg_profit_factor = df['profit_factor'].mean()
    total_trades = df['total_trades'].sum()
    profitable_windows = (df['total_return_equity'] > 0).sum()
    
    print(f"üéØ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°:")
    print(f"   üìà Total Return: {total_return:.2%}")
    print(f"   üìà Average Win Rate: {avg_win_rate:.1%}")
    print(f"   üìà Average Profit Factor: {avg_profit_factor:.2f}")
    print(f"   üìä Total Trades: {total_trades:,}")
    print(f"   ‚úÖ Profitable Windows: {profitable_windows}/{len(df)} ({profitable_windows/len(df):.1%})")
    print(f"   üìâ Max Drawdown: {df['max_drawdown'].min():.2%}")
    
    # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•
    print(f"\nüéØ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•:")
    
    if total_return > 0:
        print("‚úÖ Strategy ‡∏ó‡∏≥‡∏Å‡∏≥‡πÑ‡∏£‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°!")
    else:
        print("‚ùå Strategy ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°")
    
    if avg_profit_factor > 1.0:
        print("‚úÖ Profit Factor > 1.0 - ‡∏°‡∏µ‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û")
    else:
        print("‚ùå Profit Factor < 1.0 - ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á")
    
    if avg_win_rate > 0.5:
        print("‚úÖ Win Rate > 50% - ‡∏î‡∏µ")
    else:
        print("‚ö†Ô∏è Win Rate < 50% - ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á")

if __name__ == "__main__":
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå metrics
    df = create_complete_metrics()
    
    if df is not None:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ
        display_summary(df)
        
        print(f"\nüìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:")
        print(f"   üìä outputs/metrics/trading_metrics_complete_{len(df)}_windows.csv")
        print(f"   üìÑ outputs/metrics/complete_metrics_summary.json")
        print(f"\nüöÄ ‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Colab notebook ‡πÅ‡∏•‡πâ‡∏ß!")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå metrics ‡πÑ‡∏î‡πâ")