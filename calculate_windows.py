#!/usr/bin/env python3
"""
‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Windows ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡∏à‡∏≤‡∏Å Configuration
‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Walk-Forward Analysis windows
"""

import yaml
import pandas as pd
from pathlib import Path
import sys
import os

# ‡πÄ‡∏û‡∏¥‡πà‡∏° src ‡πÉ‡∏ô Python path
sys.path.append(str(Path(__file__).parent / "src"))

try:
    from utils.splits import time_splits
    USE_REAL_SPLITS = True
except ImportError:
    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import time_splits ‡πÑ‡∏î‡πâ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")
    USE_REAL_SPLITS = False

def calculate_windows_accurate(config_path="configs/config.yaml", data_path=None):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô windows ‡πÅ‡∏ö‡∏ö‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏à‡∏≤‡∏Å config"""
    
    # ‡πÇ‡∏´‡∏•‡∏î config
    with open(config_path, 'r', encoding='utf-8') as f:
        cfg = yaml.safe_load(f)
    
    print("üîß Configuration:")
    print(f"  üìÖ Train months: {cfg['split']['train_months']}")
    print(f"  ‚úÖ Valid months: {cfg['split']['valid_months']}")
    print(f"  üß™ Test months: {cfg['split']['test_months']}")
    print(f"  ‚û°Ô∏è Step months: {cfg['split']['step_months']}")
    print()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if data_path is None:
        # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÅ‡∏•‡πâ‡∏ß
        prepared_dir = Path("data/prepared")
        if prepared_dir.exists():
            data_files = list(prepared_dir.glob("*.parquet"))
            if data_files:
                data_path = data_files[0]
            else:
                # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
                raw_dir = Path("data/raw")
                if raw_dir.exists():
                    raw_files = list(raw_dir.glob("*.csv")) + list(raw_dir.glob("*.parquet"))
                    if raw_files:
                        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô: python -m scripts.preprocess")
                        print(f"üìÅ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö: {raw_files[0]}")
                        return None
    
    if data_path is None or not Path(data_path).exists():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•!")
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
        print("  1. ‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô data/raw/")
        print("  2. ‡∏£‡∏±‡∏ô python -m scripts.preprocess")
        return None
    
    print(f"üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å: {data_path}")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if str(data_path).endswith('.csv'):
        df = pd.read_csv(data_path)
    else:
        df = pd.read_parquet(data_path)
    
    print(f"üìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(df):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # ‡πÅ‡∏õ‡∏•‡∏á timestamp
    df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
    start_date = df['timestamp'].min()
    end_date = df['timestamp'].max()
    
    print(f"üìÖ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {start_date.strftime('%Y-%m-%d')} ‡∏ñ‡∏∂‡∏á {end_date.strftime('%Y-%m-%d')}")
    total_days = (end_date - start_date).days
    total_months = total_days / 30.44  # ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    print(f"‚è±Ô∏è ‡∏£‡∏ß‡∏°: {total_days} ‡∏ß‡∏±‡∏ô ({total_months:.1f} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)")
    print()
    
    if USE_REAL_SPLITS:
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì windows ‡πÅ‡∏ö‡∏ö‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Walk-Forward Windows ‡πÅ‡∏ö‡∏ö‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥...")
        
        windows = list(time_splits(
            df, 
            cfg['split']['train_months'], 
            cfg['split']['valid_months'], 
            cfg['split']['test_months'], 
            cfg['split']['step_months']
        ))
        
        # ‡∏Å‡∏£‡∏≠‡∏á windows ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
        seq_len = cfg.get('train', {}).get('seq_len', 96)
        valid_windows = []
        
        for i, (tr, va, te) in enumerate(windows):
            if len(tr) >= seq_len and len(va) >= seq_len and len(te) >= seq_len:
                valid_windows.append((i, tr, va, te))
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î window ‡πÅ‡∏£‡∏Å‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡∏≠‡∏±‡∏ô
                if i < 3:
                    tr_start = df.iloc[tr[0]]['timestamp'].strftime('%Y-%m-%d')
                    tr_end = df.iloc[tr[-1]]['timestamp'].strftime('%Y-%m-%d')
                    te_start = df.iloc[te[0]]['timestamp'].strftime('%Y-%m-%d')
                    te_end = df.iloc[te[-1]]['timestamp'].strftime('%Y-%m-%d')
                    
                    print(f"  [Window {i}] Train: {len(tr):,} samples ({tr_start} ‚Üí {tr_end})")
                    print(f"               Valid: {len(va):,} samples")
                    print(f"               Test:  {len(te):,} samples ({te_start} ‚Üí {te_end})")
                    print()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ
        print("=" * 60)
        print(f"üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥):")
        print(f"  üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Windows ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(windows)}")
        print(f"  ‚úÖ Windows ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: {len(valid_windows)}")
        print(f"  ‚ùå Windows ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏≠: {len(windows) - len(valid_windows)}")
        print()
        
        if valid_windows:
            print(f"üöÄ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á: [Window 0] ‡∏ñ‡∏∂‡∏á [Window {len(valid_windows)-1}]")
            print(f"‚è±Ô∏è ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: {len(valid_windows) * 10:.0f}-{len(valid_windows) * 25:.0f} ‡∏ô‡∏≤‡∏ó‡∏µ")
            print(f"   (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 10-25 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠ Window ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö GPU)")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Window ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ!")
            print("üí° ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î train_months, valid_months, test_months")
        
        return len(valid_windows)
    
    else:
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì windows ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
        return calculate_windows_approximate(cfg, total_months)

def calculate_windows_approximate(cfg, total_months):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô windows ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"""
    
    print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Walk-Forward Windows (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)...")
    
    window_size = cfg['split']['train_months'] + cfg['split']['valid_months'] + cfg['split']['test_months']
    step_size = cfg['split']['step_months']
    
    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô windows = (total_months - window_size) / step_size + 1
    num_windows = max(0, int((total_months - window_size) / step_size) + 1)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ
    print("=" * 60)
    print(f"üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì):")
    print(f"  üìä Window size: {window_size} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    print(f"  ‚û°Ô∏è Step size: {step_size} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    print(f"  ‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Windows: {num_windows}")
    print()
    
    if num_windows > 0:
        print(f"üöÄ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á: [Window 0] ‡∏ñ‡∏∂‡∏á [Window {num_windows-1}]")
        print(f"‚è±Ô∏è ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: {num_windows * 10:.0f}-{num_windows * 25:.0f} ‡∏ô‡∏≤‡∏ó‡∏µ")
        print(f"   (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 10-25 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠ Window ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö GPU)")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Window ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ!")
        print("üí° ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î train_months, valid_months, test_months")
    
    print("=" * 60)
    
    return num_windows

def show_strategy_comparison():
    """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö strategies ‡∏ï‡πà‡∏≤‡∏á‡πÜ"""
    
    print("\nüéØ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Strategies:")
    print("=" * 60)
    
    strategies = [
        {
            "name": "Conservative",
            "rr": "1:1.2",
            "target_wr": "60%+",
            "risk": "‡∏ï‡πà‡∏≥",
            "return": "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
            "suitable": "‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà"
        },
        {
            "name": "Balanced", 
            "rr": "1:1.5",
            "target_wr": "50%+",
            "risk": "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
            "return": "‡∏î‡∏µ",
            "suitable": "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"
        },
        {
            "name": "Aggressive",
            "rr": "1:2.0",
            "target_wr": "40%+", 
            "risk": "‡∏™‡∏π‡∏á",
            "return": "‡∏™‡∏π‡∏á",
            "suitable": "‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå"
        },
        {
            "name": "Scalping",
            "rr": "1:1.0",
            "target_wr": "70%+",
            "risk": "‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å",
            "return": "‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£",
            "suitable": "High Frequency"
        }
    ]
    
    for strategy in strategies:
        print(f"üìà {strategy['name']}:")
        print(f"   RR: {strategy['rr']}, Target WR: {strategy['target_wr']}")
        print(f"   Risk: {strategy['risk']}, Return: {strategy['return']}")
        print(f"   ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {strategy['suitable']}")
        print()

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö command line usage"""
    import argparse
    
    parser = argparse.ArgumentParser(description='‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Windows ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Walk-Forward Analysis')
    parser.add_argument('--config', '-c', default='configs/config.yaml', 
                       help='Path to config file (default: configs/config.yaml)')
    parser.add_argument('--data', '-d', default=None,
                       help='Path to data file (default: auto-detect)')
    parser.add_argument('--strategies', '-s', action='store_true',
                       help='‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö strategies')
    
    args = parser.parse_args()
    
    if args.strategies:
        show_strategy_comparison()
        return
    
    num_windows = calculate_windows_accurate(args.config, args.data)
    
    if num_windows is not None and num_windows > 0:
        print(f"\nüéâ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ó‡∏£‡∏ô {num_windows} Windows!")
    else:
        print("\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Windows ‡πÑ‡∏î‡πâ")
        sys.exit(1)

if __name__ == "__main__":
    main()