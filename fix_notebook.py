#!/usr/bin/env python3
"""
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Colab notebook ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå metrics ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
"""

import json
from pathlib import Path

def fix_colab_notebook():
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç notebook ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå metrics ‡∏ó‡∏µ‡πà‡∏°‡∏µ profit_factor"""
    
    notebook_path = Path('BTC_LSTM_Colab.ipynb')
    
    if not notebook_path.exists():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå notebook!")
        return False
    
    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå notebook
    with open(notebook_path, 'r', encoding='utf-8') as f:
        notebook = json.load(f)
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV
    fixed = False
    
    for cell in notebook['cells']:
        if cell['cell_type'] == 'code':
            source_lines = cell['source']
            
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô auto_tune_config
            for i, line in enumerate(source_lines):
                # ‡∏´‡∏≤‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô latest_file
                if 'df = pd.read_csv(latest_file)' in line:
                    print(f"üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î: {line.strip()}")
                    
                    # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ profit_factor
                    new_code = '''    # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ profit_factor ‡∏Å‡πà‡∏≠‡∏ô
    preferred_files = ['latest_metrics.csv', 'trading_metrics_complete_*_windows.csv', 
                      'windows_summary.csv', 'metrics_summary.csv']
    
    df = None
    for pattern in preferred_files:
        if '*' in pattern:
            matching_files = list(metrics_dir.glob(pattern))
            if matching_files:
                test_file = sorted(matching_files)[-1]
            else:
                continue
        else:
            test_file = metrics_dir / pattern
            if not test_file.exists():
                continue
        
        try:
            test_df = pd.read_csv(test_file)
            if 'profit_factor' in test_df.columns:
                df = test_df
                print(f"‚úÖ ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå: {test_file.name}")
                break
        except:
            continue
    
    if df is None:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå metrics ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°!")
        return False, None, None
    '''
                    
                    # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏¥‡∏°
                    source_lines[i] = new_code
                    fixed = True
                    break
                
                # ‡∏´‡∏≤‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á profit_factor ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                elif "df['profit_factor']" in line and 'if' not in line:
                    print(f"üîß ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {line.strip()}")
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö column ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
                    new_line = line.replace(
                        "df['profit_factor']",
                        "df['profit_factor'] if 'profit_factor' in df.columns else 0.5"
                    )
                    source_lines[i] = new_line
                    fixed = True
    
    if fixed:
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
        with open(notebook_path, 'w', encoding='utf-8') as f:
            json.dump(notebook, f, indent=1, ensure_ascii=False)
        
        print("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç notebook ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
        return True
    else:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
        return False

if __name__ == "__main__":
    print("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Colab notebook...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå metrics ‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô
    import sys
    sys.path.append('.')
    from create_all_metrics import create_all_metrics_files
    
    print("üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå metrics ‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö...")
    create_all_metrics_files()
    
    print("\nüîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç notebook...")
    success = fix_colab_notebook()
    
    if success:
        print("\nüéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
        print("‚úÖ Colab notebook ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ KeyError")
    else:
        print("\n‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        print("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå metrics ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÉ‡∏ô Colab")