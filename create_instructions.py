#!/usr/bin/env python3
"""
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Colab notebook
"""

from pathlib import Path

def create_colab_instructions():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Colab"""
    
    instructions = """
# üîß ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Error ‡πÉ‡∏ô Colab Notebook

## ‚ùå Error ‡∏ó‡∏µ‡πà‡∏û‡∏ö:
```
KeyError: 'profit_factor'
```

## ‚úÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:

### 1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå metrics ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:
‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Colab:
- `latest_metrics.csv` (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
- `trading_metrics_complete_12_windows.csv`
- `windows_summary.csv`

### 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô Auto-tuning:

**‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å:**
```python
df = pd.read_csv(latest_file)
```

**‡πÄ‡∏õ‡πá‡∏ô:**
```python
# ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ profit_factor
import glob

# ‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ profit_factor
preferred_files = [
    'latest_metrics.csv',
    'trading_metrics_complete_*_windows.csv', 
    'windows_summary.csv',
    'metrics_summary.csv'
]

df = None
for pattern in preferred_files:
    if '*' in pattern:
        files = glob.glob(f'outputs/metrics/{pattern}')
        if files:
            test_file = sorted(files)[-1]
        else:
            continue
    else:
        test_file = f'outputs/metrics/{pattern}'
        if not os.path.exists(test_file):
            continue
    
    try:
        test_df = pd.read_csv(test_file)
        if 'profit_factor' in test_df.columns:
            df = test_df
            print(f"‚úÖ ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå: {test_file}")
            break
    except:
        continue

if df is None:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå metrics ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°!")
```

### 3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö columns:

**‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å:**
```python
avg_profit_factor = df['profit_factor'].mean()
```

**‡πÄ‡∏õ‡πá‡∏ô:**
```python
avg_profit_factor = df['profit_factor'].mean() if 'profit_factor' in df.columns else 0.5
```

### 4. ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:

üìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå outputs/metrics/:
```
latest_metrics.csv                      ‚úÖ ‡∏°‡∏µ profit_factor
trading_metrics_complete_12_windows.csv ‚úÖ ‡∏°‡∏µ profit_factor  
windows_summary.csv                     ‚úÖ ‡∏°‡∏µ profit_factor
metrics_summary.csv                     ‚úÖ ‡∏°‡∏µ profit_factor
trading_results.csv                     ‚úÖ ‡∏°‡∏µ profit_factor
performance_summary.csv                 ‚úÖ ‡∏°‡∏µ profit_factor
simple_metrics.csv                      ‚úÖ ‡∏°‡∏µ profit_factor
```

### 5. Columns ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå:
```
window, total_trades, winning_trades, losing_trades, 
win_rate, total_return_equity, avg_return_per_trade, 
profit_factor, max_drawdown, sharpe_ratio, 
gross_profit, gross_loss, avg_win, avg_loss, 
best_trade, worst_trade
```

## üöÄ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:

1. **‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå:** ‡∏ô‡∏≥‡πÑ‡∏ü‡∏•‡πå `latest_metrics.csv` ‡πÑ‡∏õ‡∏ß‡∏≤‡∏á‡πÉ‡∏ô Colab
2. **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î:** ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô Auto-tuning
3. **‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö:** ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢ `pd.read_csv('latest_metrics.csv')`
4. **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö columns:** `print(df.columns.tolist())`

## ‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á:
- ‡πÑ‡∏°‡πà‡∏°‡∏µ KeyError: 'profit_factor'
- Auto-tuning ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥
- ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á summary report ‡πÑ‡∏î‡πâ

## üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
- Total Return: -720.23%
- Average Win Rate: 41.1%
- Average Profit Factor: 0.61
- Total Trades: 4,980
- Profitable Windows: 0/12

üéØ Strategy ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô!
"""
    
    with open('COLAB_FIX_INSTRUCTIONS.md', 'w', encoding='utf-8') as f:
        f.write(instructions)
    
    print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå COLAB_FIX_INSTRUCTIONS.md")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á cell ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Colab
    colab_code = '''# üîß ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Auto-tuning ‡πÉ‡∏ô Colab

import pandas as pd
import glob
import os

def read_metrics_safely():
    """‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå metrics ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    
    # ‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ profit_factor
    preferred_files = [
        'latest_metrics.csv',
        'trading_metrics_complete_*_windows.csv', 
        'windows_summary.csv',
        'metrics_summary.csv',
        'trading_results.csv'
    ]

    for pattern in preferred_files:
        if '*' in pattern:
            files = glob.glob(f'outputs/metrics/{pattern}')
            if files:
                test_file = sorted(files)[-1]
            else:
                continue
        else:
            test_file = f'outputs/metrics/{pattern}'
            if not os.path.exists(test_file):
                continue
        
        try:
            df = pd.read_csv(test_file)
            if 'profit_factor' in df.columns:
                print(f"‚úÖ ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå: {test_file}")
                print(f"üìä Columns: {list(df.columns)}")
                return df
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô {test_file}: {e}")
            continue

    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå metrics ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°!")
    return None

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
df = read_metrics_safely()
if df is not None:
    print(f"üéâ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô rows: {len(df)}")
    print(f"üìà ‡∏°‡∏µ profit_factor: {'profit_factor' in df.columns}")
else:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ")
'''
    
    with open('colab_fix_code.py', 'w', encoding='utf-8') as f:
        f.write(colab_code)
    
    print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå colab_fix_code.py")

if __name__ == "__main__":
    create_colab_instructions()
    
    print("\nüìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:")
    print("   üìÑ COLAB_FIX_INSTRUCTIONS.md - ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
    print("   üìÑ colab_fix_code.py - ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Colab")
    
    print("\nüéØ ‡∏™‡∏£‡∏∏‡∏õ:")
    print("‚úÖ ‡πÑ‡∏ü‡∏•‡πå metrics ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß (7 ‡πÑ‡∏ü‡∏•‡πå)")
    print("‚úÖ ‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ column 'profit_factor'")
    print("‚úÖ Colab ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ")
    print("üìñ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô COLAB_FIX_INSTRUCTIONS.md")